package me.chrisswr1.deploypommavenplugin;

import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
import lombok.Getter;
import org.apache.maven.model.Developer;
import org.apache.maven.model.License;
import org.apache.maven.model.Model;
import org.apache.maven.model.building.ModelBuildingException;
import org.apache.maven.plugin.AbstractMojo;
import org.apache.maven.plugin.MojoExecutionException;
import org.apache.maven.plugins.annotations.LifecyclePhase;
import org.apache.maven.plugins.annotations.Mojo;
import org.apache.maven.plugins.annotations.Parameter;
import org.apache.maven.project.MavenProject;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import proguard.annotation.Keep;
import proguard.annotation.KeepName;

import java.io.File;
import java.io.IOException;
import java.util.List;

@Mojo(
	name = "add-defaults",
	defaultPhase = LifecyclePhase.INITIALIZE,
	threadSafe = true
)
@Keep
public class AddDefaultsMojo
extends AbstractMojo {
	private static final @NotNull License DEFAULT_LICENSE = new License();

	@Parameter(
		defaultValue = "${project}",
		readonly = true
	)
	@SuppressFBWarnings(
		value = "EI_EXPOSE_REP",
		justification = "Getter generated by Lombok"
	)
	@Getter
	@KeepName
	private @Nullable MavenProject    project;
	@Parameter(
		defaultValue =
			"${project.build.directory}/" +
			"${project.build.finalName}-deploy.pom"
	)
	@Getter
	@KeepName
	private @Nullable File            outputPom;
	@Parameter(
		defaultValue = "false"
	)
	@Getter
	@KeepName
	private           boolean         overwriteWithDefaults;
	@Parameter(
		defaultValue = "$${project.site.baseUrl}/$${project.site.urlPath}"
	)
	@Getter
	@KeepName
	private @Nullable String          defaultUrl;
	@Parameter
	@Getter
	@KeepName
	private @NotNull  List<License>   defaultLicenses   = List.of(
		AddDefaultsMojo.DEFAULT_LICENSE
	);
	@Parameter
	@Getter
	@KeepName
	private @NotNull  List<Developer> defaultDevelopers = List.of();

	static {
		AddDefaultsMojo.DEFAULT_LICENSE.setName("${license.signature}");
		AddDefaultsMojo.DEFAULT_LICENSE.setUrl("${license.url}");
		AddDefaultsMojo.DEFAULT_LICENSE.setDistribution("repo");
	}

	@Override
	public void execute() throws MojoExecutionException {
		final @Nullable MavenProject project = this.getProject();
		if (project == null) {
			throw new MojoExecutionException("No Maven project found!");
		}

		final @Nullable Model model;
		try {
			model = PomProcessor.getModel(project.getFile());
		} catch (final @NotNull IOException e) {
			throw new MojoExecutionException("Couldn't read project POM!", e);
		}

		boolean       appliedChanges        = false;
		final boolean overwriteWithDefaults = this.isOverwriteWithDefaults();

		final @Nullable String existingUrl = model.getUrl();
		final @Nullable String defaultUrl  = this.getDefaultUrl();
		if (
			defaultUrl != null &&
			(!(defaultUrl.equalsIgnoreCase(existingUrl))) &&
			(
				existingUrl == null ||
				existingUrl.isEmpty() ||
				overwriteWithDefaults
			)
		) {
			model.setUrl(defaultUrl);
			appliedChanges = true;
		}

		final @NotNull List<License> defaultLicenses = this.getDefaultLicenses();
		if (
			(!(defaultLicenses.isEmpty())) &&
			(model.getLicenses().isEmpty() || overwriteWithDefaults)
		) {
			model.setLicenses(defaultLicenses);
			appliedChanges = true;
		}

		final @NotNull List<Developer> defaultDevelopers = this.getDefaultDevelopers();
		if (
			(!(defaultLicenses.isEmpty())) &&
			(model.getDevelopers().isEmpty() || overwriteWithDefaults)
		) {
			model.setDevelopers(defaultDevelopers);
			appliedChanges = true;
		}

		if (appliedChanges) {
			try {
				PomProcessor.setModel(this.getOutputPom(), model, project);
			} catch (
				final @NotNull
				IOException |
				ModelBuildingException e
			) {
				throw new MojoExecutionException(
					"Can't write model to output POM!",
					e
				);
			}
		}
	}
}
