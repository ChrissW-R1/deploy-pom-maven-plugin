package me.chrisswr1.deploypommavenplugin;

import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
import lombok.Getter;
import org.apache.maven.execution.MavenSession;
import org.apache.maven.plugin.AbstractMojo;
import org.apache.maven.plugin.MojoExecutionException;
import org.apache.maven.plugins.annotations.LifecyclePhase;
import org.apache.maven.plugins.annotations.Mojo;
import org.apache.maven.plugins.annotations.Parameter;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.w3c.dom.Text;
import org.xml.sax.SAXException;
import proguard.annotation.Keep;
import proguard.annotation.KeepName;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.xpath.*;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.util.List;

@Mojo(
	name = "add-defaults",
	defaultPhase = LifecyclePhase.INITIALIZE,
	threadSafe = true
)
@Keep
public class AddDefaultsMojo extends AbstractMojo {
	private static final @NotNull String WRAPPED_TAG = "wrapped";

	@Parameter(
		defaultValue = "${session}",
		readonly = true
	)
	@SuppressFBWarnings(
		value = "EI_EXPOSE_REP",
		justification = "Getter generated by Lombok"
	)
	@Getter
	@KeepName
	private @Nullable MavenSession session;
	@Parameter(
		defaultValue = "${project.basedir}/pom.xml",
		readonly = true
	)
	@Getter
	@KeepName
	private @Nullable File pomFile;
	@Parameter(
		defaultValue = "${project.build.sourceEncoding}",
		readonly = true
	)
	@Getter
	@KeepName
	private @Nullable String encoding;
	@Parameter(
		readonly = true
	)
	@Getter
	@KeepName
	private @NotNull List<XmlNode> nodes = List.of(
		new XmlNode("url", true),
		new XmlNode("licenses", true),
		new XmlNode("developers", true)
	);

	@Override
	public void execute() throws MojoExecutionException {
		@Nullable String encoding = this.getEncoding();
		if (encoding == null) {
			encoding = StandardCharsets.UTF_8.name();
		}
		final @Nullable File pomFile = this.getPomFile();
		if (pomFile == null || !(pomFile.exists())) {
			throw new MojoExecutionException(
				"Couldn't find POM file to add defaults to!"
			);
		}
		final @NotNull XmlProcessor xmlProcessor = new XmlProcessor();

		try {
			final @NotNull DocumentBuilder builder =
				xmlProcessor.createDocumentBuilder();
			final @NotNull XPath xpath = XPathFactory.newInstance().newXPath();
			final @NotNull XPathExpression projectXpath = xpath.compile(
				"//project"
			);
			final @NotNull Document pom = builder.parse(pomFile);
			final @Nullable Node project = (Node)(projectXpath.evaluate(
				pom,
				XPathConstants.NODE
			));
			if (project == null) {
				throw new MojoExecutionException(
					"Couldn't find <project> node in POM file!"
				);
			}

			PropertyProcessor propertyProcessor = new PropertyProcessor(
				this.getSession()
			);

			boolean outputChanged = false;
			for (final @NotNull XmlNode node : this.getNodes()) {
				try {
					final @Nullable String nodePath = node.getXpath();
					if (nodePath == null || nodePath.isEmpty()) {
						continue;
					}
					final @Nullable Node existingNode = (Node)(xpath.evaluate(
						nodePath,
						project,
						XPathConstants.NODE)
					);

					if (existingNode != null && !(node.isOverwrite())) {
						continue;
					}

					if (!(nodePath.matches(
						"([A-Za-z_:][A-Za-z0-9_.:-]*)(/([A-Za-z_:][A-Za-z0-9_.:-]*))*"
					))) {
						this.getLog().error(
							"Invalid XPath expression: " +
							nodePath + ". Skipping node."
						);
						continue;
					}

					@NotNull Node treeNode = project;
					for (final @NotNull String pathPart : nodePath.split(
						"/"
					)) {
						@NotNull Node createdNode = pom.createElement(pathPart);
						treeNode.appendChild(createdNode);
						treeNode = createdNode;
					}

					@Nullable String defaultValue = node.getDefaultValue();
					if (defaultValue == null) {
						defaultValue = "";
					}
					final @NotNull String wrapped =
						"<" + AddDefaultsMojo.WRAPPED_TAG + ">" +
						defaultValue +
						"</" + AddDefaultsMojo.WRAPPED_TAG + ">";

					final @NotNull Document wrappedDoc = builder.parse(
						new ByteArrayInputStream(wrapped.getBytes(encoding))
					);

					final @NotNull NodeList children = wrappedDoc.getChildNodes();
					for (int i = 0; i < children.getLength(); i++) {
						final @NotNull Node child = children.item(i);
						final @NotNull Node importedNode = (pom.importNode(
							child,
							true
						));

						if (node.isResolveProperties()) {
							propertyProcessor.resolveNode(importedNode);
						}

						if (importedNode == null) {
							continue;
						}

						if (
							importedNode.getNodeType() == Node.ELEMENT_NODE
						) {
							treeNode.appendChild(importedNode);
							outputChanged = true;
						} else if (
							importedNode.getNodeType() == Node.TEXT_NODE
						) {
							treeNode.setTextContent(
								((Text)importedNode).getWholeText()
							);
							outputChanged = true;
						}
					}
				} catch (
					final @NotNull
					IOException |
					SAXException |
					XPathExpressionException e
				) {
					throw new MojoExecutionException(
						"Couldn't initialize XML parser!",
						e
					);
				}
			}

			if (outputChanged) {
				xmlProcessor.format(pomFile, pom, Charset.forName(encoding));
				this.getLog().info("Output POM formatted.");
			}
		} catch (
			final @NotNull
			IOException |
			ParserConfigurationException |
			SAXException |
			TransformerException |
			XPathExpressionException e
		) {
			throw new MojoExecutionException(
				"Couldn't initialize XML parser!",
				e
			);
		}
	}
}
