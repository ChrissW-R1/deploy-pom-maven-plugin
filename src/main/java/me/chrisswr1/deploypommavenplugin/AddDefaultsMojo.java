package me.chrisswr1.deploypommavenplugin;

import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
import lombok.Getter;
import org.apache.maven.execution.MavenSession;
import org.apache.maven.model.Developer;
import org.apache.maven.model.License;
import org.apache.maven.model.Model;
import org.apache.maven.plugin.AbstractMojo;
import org.apache.maven.plugin.MojoExecutionException;
import org.apache.maven.plugin.logging.Log;
import org.apache.maven.plugins.annotations.LifecyclePhase;
import org.apache.maven.plugins.annotations.Mojo;
import org.apache.maven.plugins.annotations.Parameter;
import org.apache.maven.project.MavenProject;
import org.apache.maven.project.ProjectBuilder;
import org.apache.maven.project.ProjectBuildingException;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import proguard.annotation.Keep;
import proguard.annotation.KeepName;

import javax.inject.Inject;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.util.List;

@Mojo(
	name = "add-defaults",
	defaultPhase = LifecyclePhase.INITIALIZE,
	threadSafe = true
)
@Keep
public class AddDefaultsMojo
extends AbstractMojo {
	private static final @NotNull License DEFAULT_LICENSE = new License();

	@Inject
	@Getter
	private ProjectBuilder projectBuilder;

	@Parameter(
		defaultValue = "${session}",
		readonly = true
	)
	@SuppressFBWarnings(
		value = "EI_EXPOSE_REP",
		justification = "Getter generated by Lombok"
	)
	@Getter
	@KeepName
	private @Nullable MavenSession    session;
	@Parameter(
		defaultValue = "${project.build.finalName}-deploy.pom"
	)
	@Getter
	@KeepName
	private @Nullable File            outputPom;
	@Parameter(
		defaultValue = "false"
	)
	@Getter
	@KeepName
	private           boolean         overwriteWithDefaults;
	@Parameter(
		defaultValue = "true"
	)
	@Getter
	@KeepName
	private           boolean         resolveDefaultElements;
	@Parameter(
		defaultValue = "$${project.site.baseUrl}/$${project.site.urlPath}"
	)
	@Getter
	@KeepName
	private @Nullable String          defaultUrl;
	@Parameter
	@Getter
	@KeepName
	private @NotNull  List<License>   defaultLicenses   = List.of(
		AddDefaultsMojo.DEFAULT_LICENSE
	);
	@Parameter
	@Getter
	@KeepName
	private @NotNull  List<Developer> defaultDevelopers = List.of();

	static {
		AddDefaultsMojo.DEFAULT_LICENSE.setName("${license.signature}");
		AddDefaultsMojo.DEFAULT_LICENSE.setUrl("${license.url}");
		AddDefaultsMojo.DEFAULT_LICENSE.setDistribution("repo");
	}

	@Override
	public void execute() throws MojoExecutionException {
		final @NotNull Log log = this.getLog();

		final @Nullable MavenSession session = this.getSession();
		if (session == null) {
			throw new MojoExecutionException("Maven session is not available!");
		}
		final @Nullable MavenProject project = session.getCurrentProject();
		if (project == null) {
			throw new MojoExecutionException("Maven project is not available!");
		}

		final @Nullable File pomFile = project.getFile();
		if (pomFile == null || (!(pomFile.exists()))) {
			throw new MojoExecutionException(
				"Project POM file is not available!"
			);
		}

		byte[] pomBytes;
		try {
			pomBytes = Files.readAllBytes(pomFile.toPath());
		} catch (IOException e) {
			throw new MojoExecutionException("Couldn't read project POM!", e);
		}

		final @Nullable Model model;
		try {
			model = PomProcessor.getModel(pomFile);
		} catch (final @NotNull IOException e) {
			throw new MojoExecutionException("Couldn't read project POM!", e);
		}

		boolean       appliedChanges         = false;
		final boolean overwriteWithDefaults  = this.isOverwriteWithDefaults();
		final boolean resolveDefaultElements = this.isResolveDefaultElements();
		final @NotNull PropertyProcessor propertyProcessor =
			new PropertyProcessor(session);

		if (overwriteWithDefaults) {
			log.info(
				"Existing POM elements will be overwritten " +
				"with defaults!"
			);
		}

		final @Nullable String existingUrl = model.getUrl();
		@Nullable String       defaultUrl  = this.getDefaultUrl();
		if (
			defaultUrl != null &&
			(
				existingUrl == null ||
				existingUrl.isEmpty() ||
				overwriteWithDefaults
			)
		) {
			if (resolveDefaultElements) {
				defaultUrl = propertyProcessor.resolveString(defaultUrl);
			}

			if (defaultUrl != null && (!(defaultUrl.equals(existingUrl)))) {
				log.info("Add default URL to POM: " + defaultUrl);
				model.setUrl(defaultUrl);

				try {
					PomProcessor.addContent(pomBytes, "<url>" + defaultUrl + "</url>", "/project", overwriteWithDefaults);
				} catch (IOException e) {
					log.error("Couldn't add URL to POM!", e);
				}

				appliedChanges = true;
			}
		}

		@NotNull List<License> defaultLicenses =
			this.getDefaultLicenses();
		if (
			(!(defaultLicenses.isEmpty())) &&
			(model.getLicenses().isEmpty() || overwriteWithDefaults)
		) {
			if (resolveDefaultElements) {
				defaultLicenses = propertyProcessor.resolveLicenses(
					defaultLicenses
				);
			}

			for (final @NotNull License license : defaultLicenses) {
				log.info(
					"Add default license to POM: " +
					license.getName()
				);
			}
			model.setLicenses(defaultLicenses);
			appliedChanges = true;
		}

		@NotNull List<Developer> defaultDevelopers =
			this.getDefaultDevelopers();
		if (
			(!(defaultDevelopers.isEmpty())) &&
			(model.getDevelopers().isEmpty() || overwriteWithDefaults)
		) {
			if (resolveDefaultElements) {
				defaultDevelopers = propertyProcessor.resolveDevelopers(
					defaultDevelopers
				);
			}

			for (final @NotNull Developer developer : defaultDevelopers) {
				log.info(
					"Add default developer to POM: " +
					developer.getName()
				);
			}
			model.setDevelopers(defaultDevelopers);
			appliedChanges = true;
		}

		if (appliedChanges) {
			try {
				log.info(
					"Changed POM with defaults. " +
					"Reload Maven project."
				);
				PomProcessor.setModel(
					this.getOutputPom(),
					model,
					session,
					this.getProjectBuilder()
				);
			} catch (
				final @NotNull
				IOException |
				ProjectBuildingException e
			) {
				throw new MojoExecutionException(
					"Can't write model to output POM!",
					e
				);
			}
		} else {
			log.info("Nothing changed.");
		}
	}
}
