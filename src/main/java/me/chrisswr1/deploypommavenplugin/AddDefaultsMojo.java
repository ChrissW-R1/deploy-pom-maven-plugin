package me.chrisswr1.deploypommavenplugin;

import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
import lombok.Getter;
import org.apache.maven.execution.MavenSession;
import org.apache.maven.plugin.AbstractMojo;
import org.apache.maven.plugin.MojoExecutionException;
import org.apache.maven.plugins.annotations.LifecyclePhase;
import org.apache.maven.plugins.annotations.Mojo;
import org.apache.maven.plugins.annotations.Parameter;
import org.apache.maven.project.MavenProject;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import proguard.annotation.Keep;
import proguard.annotation.KeepName;

import java.io.File;
import java.util.List;

@Mojo(
	name = "add-defaults",
	defaultPhase = LifecyclePhase.INITIALIZE,
	threadSafe = true
)
@Keep
public class AddDefaultsMojo extends AbstractMojo {
	@Parameter(
		defaultValue = "${session}",
		readonly = true
	)
	@SuppressFBWarnings(
		value = "EI_EXPOSE_REP",
		justification = "Getter generated by Lombok"
	)
	@Getter
	@KeepName
	private @Nullable MavenSession session;
	@Parameter(
		defaultValue = "${project.basedir}/pom.xml",
		readonly = true
	)
	@Getter
	@KeepName
	private @Nullable File pomFile;
	@Parameter(
		defaultValue = "me.chrissw-r1",
		readonly = true
	)
	@Getter
	@KeepName
	private @Nullable String rootGroupId;
	@Parameter(
		defaultValue = "general-parent",
		readonly = true
	)
	@Getter
	@KeepName
	private @Nullable String rootArtifactId;
	@Parameter(
		readonly = true
	)
	@Getter
	@KeepName
	private @NotNull List<XmlNode> nodes = List.of(
		new XmlNode("url", true),
		new XmlNode("licenses", true),
		new XmlNode("developers", true)
	);

	@Override
	public void execute() throws MojoExecutionException {
		final @Nullable MavenSession session = this.getSession();
		if (session == null) {
			throw new MojoExecutionException("Maven session is not available!");
		}
		final @Nullable String rootGroupId = this.getRootGroupId();
		if (rootGroupId == null) {
			throw new MojoExecutionException("Parameter 'rootGroupId' is null!");
		}
		final @Nullable String rootArtifactId = this.getRootArtifactId();
		if (rootArtifactId == null) {
			throw new MojoExecutionException("Parameter 'rootArtifactId' is null!");
		}

		@NotNull MavenProject project = session.getCurrentProject();
		while (!(
			rootGroupId.equalsIgnoreCase(project.getGroupId()) &&
			rootArtifactId.equalsIgnoreCase(project.getArtifactId())
		)) {
			if (project.hasParent()) {
				project = project.getParent();
			} else {
				throw new MojoExecutionException(
					"Could not find the '" +
					rootGroupId + ":" + rootArtifactId +
					"' in the parent hierarchy!"
				);
			}
		}
	}
}
