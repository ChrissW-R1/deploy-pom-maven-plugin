package me.chrisswr1.deploypommavenplugin;

import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
import lombok.Getter;
import org.apache.maven.execution.MavenSession;
import org.apache.maven.model.Developer;
import org.apache.maven.model.License;
import org.apache.maven.plugin.AbstractMojo;
import org.apache.maven.plugin.MojoExecutionException;
import org.apache.maven.plugins.annotations.LifecyclePhase;
import org.apache.maven.plugins.annotations.Mojo;
import org.apache.maven.plugins.annotations.Parameter;
import org.apache.maven.project.MavenProject;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import proguard.annotation.Keep;
import proguard.annotation.KeepName;

import java.io.File;
import java.util.List;

@Mojo(
	name = "add-defaults",
	defaultPhase = LifecyclePhase.INITIALIZE,
	threadSafe = true
)
@Keep
public class AddDefaultsMojo extends AbstractMojo {
	private static final @NotNull License DEFAULT_LICENSE = new License();

	@Parameter(
		defaultValue = "${session}",
		readonly = true
	)
	@SuppressFBWarnings(
		value = "EI_EXPOSE_REP",
		justification = "Getter generated by Lombok"
	)
	@Getter
	@KeepName
	private @Nullable MavenSession session;
	@Parameter(
		defaultValue =
			"${project.build.directory}/" +
			"${project.build.finalName}-deploy.pom"
	)
	@Getter
	@KeepName
	private @Nullable File         outputPom;
	@Parameter(
		defaultValue = "false"
	)
	@Getter
	@KeepName
	private           boolean      overwriteWithDefaults;
	@Parameter(
		defaultValue = "$${project.site.baseUrl}/$${project.site.urlPath}"
	)
	@Getter
	@KeepName
	private @Nullable String defaultUrl;
	@Parameter
	@Getter
	@KeepName
	private @NotNull List<License> defaultLicenses = List.of(
		AddDefaultsMojo.DEFAULT_LICENSE
	);
	@Parameter
	@Getter
	@KeepName
	private @NotNull List<Developer> defaultDevelopers = List.of();

	static {
		AddDefaultsMojo.DEFAULT_LICENSE.setName("${license.signature}");
		AddDefaultsMojo.DEFAULT_LICENSE.setUrl("${license.url}");
		AddDefaultsMojo.DEFAULT_LICENSE.setDistribution("repo");
	}

	@Override
	public void execute() throws MojoExecutionException {
		final @Nullable MavenSession session = this.getSession();
		if (session == null) {
			throw new MojoExecutionException("Couldn't get Maven session!");
		}
		final @Nullable MavenProject project = session.getCurrentProject();
		if (project == null) {
			throw new MojoExecutionException("No Maven project found!");
		}

		final boolean overwriteWithDefaults = this.isOverwriteWithDefaults();

		final @Nullable String url = this.getDefaultUrl();
		if (
			url != null &&
			(project.getUrl() == null || overwriteWithDefaults)
		) {
			project.setUrl(url);
		}

		if (project.getLicenses().isEmpty() || overwriteWithDefaults) {
			project.setLicenses(this.getDefaultLicenses());
		}

		if (project.getDevelopers().isEmpty() || overwriteWithDefaults) {
			project.setDevelopers(this.getDefaultDevelopers());
		}
	}
}
