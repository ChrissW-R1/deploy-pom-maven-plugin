package me.chrisswr1.deploypommavenplugin;

import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
import lombok.Getter;
import org.apache.maven.execution.MavenSession;
import org.apache.maven.project.MavenProject;
import org.codehaus.plexus.interpolation.InterpolationException;
import org.codehaus.plexus.interpolation.PrefixedObjectValueSource;
import org.codehaus.plexus.interpolation.PropertiesBasedValueSource;
import org.codehaus.plexus.interpolation.StringSearchInterpolator;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.w3c.dom.*;

public class PropertyProcessor {
	@SuppressFBWarnings(
		value = "EI_EXPOSE_REP",
		justification = "Getter generated by Lombok"
	)
	@Getter
	private final StringSearchInterpolator stringInterpolator;

	public PropertyProcessor(
		final @Nullable MavenSession session
	) {
		final @NotNull StringSearchInterpolator stringInterpolator =
			new StringSearchInterpolator();

		if (session != null) {
			final @Nullable MavenProject project = session.getCurrentProject();
			if (project != null) {
				stringInterpolator.addValueSource(
					new PropertiesBasedValueSource(project.getProperties())
				);
				stringInterpolator.addValueSource(
					new PrefixedObjectValueSource("project", project)
				);
				stringInterpolator.addValueSource(
					new PrefixedObjectValueSource("pom", project)
				);
			}

			stringInterpolator.addValueSource(
				new PropertiesBasedValueSource(session.getUserProperties())
			);
			stringInterpolator.addValueSource(
				new PropertiesBasedValueSource(session.getSystemProperties())
			);
		}

		try {
			stringInterpolator.addValueSource(
				new PropertiesBasedValueSource(System.getProperties())
			);
		} catch (final @NotNull SecurityException ignored) {
		}

		this.stringInterpolator = stringInterpolator;
	}

	public @Nullable String resolveString(
		final @Nullable String text
	) {
		if (text == null) {
			return null;
		}

		try {
			return this.getStringInterpolator().interpolate(text);
		} catch (final InterpolationException e) {
			return text;
		}
	}

	public void resolveNode(
		final @Nullable Node node
	) {
		if (node == null) {
			return;
		}

		switch (node.getNodeType()) {
			case Node.TEXT_NODE: {
				Text textNode = (Text) node;
				String rawText = textNode.getWholeText();
				String resolvedText = this.resolveString(rawText);
				if (!(rawText.equals(resolvedText))) {
					textNode.setData(resolvedText);
				}
				break;
			}
			case Node.ATTRIBUTE_NODE: {
				Attr attribute = (Attr) node;
				String rawText = attribute.getValue();
				String resolvedText = this.resolveString(rawText);
				if (!(rawText.equals(resolvedText))) {
					attribute.setValue(resolvedText);
				}
				break;
			}
			case Node.ELEMENT_NODE: {
				Element element = (Element) node;
				NamedNodeMap attributes = element.getAttributes();
				for (int i = 0; i < attributes.getLength(); i++) {
					this.resolveNode(attributes.item(i));
				}

				NodeList childNodes = element.getChildNodes();
				for (int i = 0; i < childNodes.getLength(); i++) {
					this.resolveNode(childNodes.item(i));
				}
			}
		}
	}
}
