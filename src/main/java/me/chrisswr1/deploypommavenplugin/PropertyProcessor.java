package me.chrisswr1.deploypommavenplugin;

import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
import lombok.Getter;
import org.apache.maven.execution.MavenSession;
import org.apache.maven.model.Developer;
import org.apache.maven.model.License;
import org.apache.maven.project.MavenProject;
import org.codehaus.plexus.interpolation.InterpolationException;
import org.codehaus.plexus.interpolation.PrefixedObjectValueSource;
import org.codehaus.plexus.interpolation.PropertiesBasedValueSource;
import org.codehaus.plexus.interpolation.StringSearchInterpolator;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

public class PropertyProcessor {
	@SuppressFBWarnings(
		value = "EI_EXPOSE_REP",
		justification = "Getter generated by Lombok"
	)
	@Getter
	private final StringSearchInterpolator stringInterpolator;

	public PropertyProcessor(
		final @Nullable MavenSession session
	) {
		final @NotNull StringSearchInterpolator stringInterpolator =
			new StringSearchInterpolator();

		if (session != null) {
			stringInterpolator.addValueSource(
				new PropertiesBasedValueSource(session.getSystemProperties())
			);

			final @Nullable MavenProject project = session.getCurrentProject();
			if (project != null) {
				stringInterpolator.addValueSource(
					new PropertiesBasedValueSource(project.getProperties())
				);
				stringInterpolator.addValueSource(
					new PrefixedObjectValueSource("project", project)
				);
				stringInterpolator.addValueSource(
					new PrefixedObjectValueSource("pom", project)
				);
			}

			stringInterpolator.addValueSource(
				new PropertiesBasedValueSource(session.getUserProperties())
			);
		}

		try {
			stringInterpolator.addValueSource(
				new PropertiesBasedValueSource(System.getProperties())
			);
		} catch (final @NotNull SecurityException ignored) {
		}

		this.stringInterpolator = stringInterpolator;
	}

	public @Nullable String resolveString(
		final @Nullable String text
	) {
		if (text == null) {
			return null;
		}

		try {
			return this.getStringInterpolator().interpolate(text);
		} catch (final @NotNull InterpolationException e) {
			return text;
		}
	}

	public @Nullable License resolveLicense(
		final @Nullable License license
	) {
		if (license == null) {
			return null;
		}

		final @NotNull License resolvedLicense = license.clone();

		resolvedLicense.setName(
			this.resolveString(license.getName())
		);
		resolvedLicense.setUrl(
			this.resolveString(license.getUrl())
		);
		resolvedLicense.setDistribution(
			this.resolveString(license.getDistribution())
		);
		resolvedLicense.setComments(
			this.resolveString(license.getComments())
		);

		return resolvedLicense;
	}

	public @NotNull List<License> resolveLicenses(
		final @Nullable Collection<? extends License> licenses
	) {
		final @NotNull List<License> resolvedLicenses = new ArrayList<>();

		if (licenses != null) {
			for (final @Nullable License license : licenses) {
				resolvedLicenses.add(this.resolveLicense(license));
			}
		}

		return resolvedLicenses;
	}

	public @Nullable Developer resolveDeveloper(
		final @Nullable Developer developer
	) {
		if (developer == null) {
			return null;
		}

		final @NotNull Developer resolvedDeveloper = developer.clone();

		resolvedDeveloper.setName(
			this.resolveString(developer.getName())
		);
		resolvedDeveloper.setEmail(
			this.resolveString(developer.getEmail())
		);
		resolvedDeveloper.setOrganization(
			this.resolveString(developer.getOrganization())
		);
		resolvedDeveloper.setOrganizationUrl(
			this.resolveString(developer.getOrganizationUrl())
		);

		return resolvedDeveloper;
	}

	public @NotNull List<Developer> resolveDevelopers(
		final @Nullable Collection<? extends Developer> developers
	) {
		final @NotNull List<Developer> resolvedDevelopers = new ArrayList<>();

		if (developers != null) {
			for (final @Nullable Developer developer : developers) {
				resolvedDevelopers.add(this.resolveDeveloper(developer));
			}
		}

		return resolvedDevelopers;
	}
}
