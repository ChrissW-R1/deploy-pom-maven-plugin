package me.chrisswr1.deploypommavenplugin;

import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
import lombok.Getter;
import org.apache.maven.execution.MavenSession;
import org.apache.maven.model.Developer;
import org.apache.maven.model.License;
import org.apache.maven.model.Model;
import org.apache.maven.plugin.AbstractMojo;
import org.apache.maven.plugin.MojoExecutionException;
import org.apache.maven.plugin.logging.Log;
import org.apache.maven.plugins.annotations.LifecyclePhase;
import org.apache.maven.plugins.annotations.Mojo;
import org.apache.maven.plugins.annotations.Parameter;
import org.apache.maven.project.MavenProject;
import org.apache.maven.project.ProjectBuilder;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import proguard.annotation.Keep;
import proguard.annotation.KeepName;

import javax.inject.Inject;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.util.List;

@Mojo(
	name = "copy-from-effective",
	defaultPhase = LifecyclePhase.PREPARE_PACKAGE,
	threadSafe = true
)
@Keep
public class CopyFromEffectiveMojo
extends AbstractMojo {
	@Inject
	@Getter
	private @Nullable ProjectBuilder projectBuilder;

	@Parameter(
		defaultValue = "${session}",
		readonly = true
	)
	@SuppressFBWarnings(
		value = "EI_EXPOSE_REP",
		justification = "Getter generated by Lombok"
	)
	@Getter
	@KeepName
	private @Nullable MavenSession session;
	@Parameter(
		defaultValue = "${project.build.finalName}-deploy.pom"
	)
	@Getter
	@KeepName
	private @Nullable File         outputPom;
	@Parameter(
		defaultValue = "false"
	)
	@Getter
	@KeepName
	private           boolean      overwriteWithEffective;
	@Parameter(
		defaultValue = "true"
	)
	@Getter
	@KeepName
	private           boolean      resolveEffectiveElements;
	@Parameter(
		defaultValue = "false"
	)
	@Getter
	@KeepName
	private           boolean      copyEffectiveUrl;
	@Parameter(
		defaultValue = "false"
	)
	@Getter
	@KeepName
	private           boolean      copyEffectiveLicenses;
	@Parameter(
		defaultValue = "false"
	)
	@Getter
	@KeepName
	private           boolean      copyEffectiveDevelopers;

	@Override
	public void execute() throws MojoExecutionException {
		final @NotNull Log log = this.getLog();

		final @Nullable MavenSession session = this.getSession();
		if (session == null) {
			throw new MojoExecutionException("Maven session is not available!");
		}
		final @Nullable MavenProject project = session.getCurrentProject();
		if (project == null) {
			throw new MojoExecutionException("Maven project is not available!");
		}

		final @Nullable File pomFile = project.getFile();
		if (pomFile == null || (!(pomFile.exists()))) {
			throw new MojoExecutionException(
				"Project POM file is not available!"
			);
		}

		final @Nullable File outputPom = this.getOutputPom();
		if (outputPom == null) {
			throw new MojoExecutionException("Output POM file is not defined!");
		}

		byte[] pomBytes;
		try {
			pomBytes = Files.readAllBytes(pomFile.toPath());
		} catch (
			final @NotNull
			IOException e
		) {
			throw new MojoExecutionException("Couldn't read project POM!", e);
		}

		final @NotNull Model model;
		try {
			model = PomProcessor.getModel(pomFile);
		} catch (
			final @NotNull
			IOException e
		) {
			throw new MojoExecutionException(
				"Couldn't read model from POM!",
				e
			);
		}

		boolean       appliedChanges     = false;
		final boolean overwriteEffective = this.isOverwriteWithEffective();
		final boolean resolveEffective   = this.isResolveEffectiveElements();
		final @NotNull PropertyProcessor propertyProcessor =
			new PropertyProcessor(session);

		if (overwriteEffective) {
			log.info(
				"Existing POM elements will be overwritten " +
				"with those from effective POM!"
			);
		}

		final @Nullable String existingUrl = model.getUrl();
		if (
			this.isCopyEffectiveUrl() && (
				existingUrl == null ||
				existingUrl.isEmpty() ||
				overwriteEffective
			)
		) {
			@Nullable String url = project.getUrl();
			if (resolveEffective) {
				url = propertyProcessor.resolveString(url);
			}

			if (
				url != null &&
				(!(url.isEmpty())) &&
				(!(url.equals(existingUrl)))
			) {
				log.info("Copied URL from effective POM: " + url);

				try {
					PomProcessor.addContent(
						pomBytes,
						"<url>" + url + "</url>",
						"/project/url",
						overwriteEffective
					);
				} catch (
					final @NotNull
					IOException e
				) {
					log.error("Couldn't add URL to POM!", e);
				}

				appliedChanges = true;
			}
		}

		final @NotNull List<License> existingLicenses = model.getLicenses();
		if (
			this.isCopyEffectiveLicenses() && (
				existingLicenses == null ||
				existingLicenses.isEmpty() ||
				overwriteEffective
			)
		) {
			@NotNull List<License> licenses = project.getLicenses();
			if (resolveEffective) {
				licenses = propertyProcessor.resolveLicenses(licenses);
			}

			final @NotNull StringBuilder sb = new StringBuilder();
			sb.append("<licenses>\n");
			for (final @NotNull License license : licenses) {
				final @Nullable String name = license.getName();
				log.info(
					"Copied license from effective POM: " + name
				);

				sb.append("\t<license>\n");
				if (name != null && (!(name.trim().isEmpty()))) {
					sb.append("\t\t<name>").append(name).append("</name>\n");
				}

				final @Nullable String distribution = license.getDistribution();
				if (distribution != null &&
					(!(distribution.trim().isEmpty()))) {
					sb.append("\t\t<distribution>").append(
						distribution
					).append("</distribution>\n");
				}

				final @Nullable String comments = license.getComments();
				if (comments != null && (!(comments.trim().isEmpty()))) {
					sb.append("\t\t<comments>").append(
						comments
					).append("</comments>\n");
				}

				sb.append("\t</license>\n");
			}
			sb.append("</licenses>");

			try {
				pomBytes = PomProcessor.addContent(
					pomBytes,
					sb.toString(),
					"/project/licenses",
					overwriteEffective
				);
			} catch (
				final @NotNull
				IOException e
			) {
				log.error("Couldn't add URL to POM!", e);
			}

			appliedChanges = true;
		}

		final @NotNull List<Developer> existingDevelopers = model.getDevelopers();
		if (
			this.isCopyEffectiveDevelopers() && (
				existingDevelopers == null ||
				existingDevelopers.isEmpty() ||
				overwriteEffective
			)
		) {
			@NotNull List<Developer> developers = project.getDevelopers();
			if (resolveEffective) {
				developers = propertyProcessor.resolveDevelopers(developers);
			}

			final @NotNull StringBuilder sb = new StringBuilder();
			sb.append("<developers>\n");
			for (final @NotNull Developer developer : developers) {
				final @Nullable String name = developer.getName();
				log.info(
					"Copied developer from effective POM: " + name
				);

				sb.append("\t<developer>\n");

				final @Nullable String id = developer.getId();
				if (id != null && (!(id.trim().isEmpty()))) {
					sb.append("\t\t<id>").append(id).append("</id>\n");
				}

				if (name != null && (!(name.trim().isEmpty()))) {
					sb.append("\t\t<name>").append(name).append("</name>\n");
				}

				final @Nullable String email = developer.getEmail();
				if (email != null && (!(email.trim().isEmpty()))) {
					sb.append("\t\t<email>").append(email).append("</email>\n");
				}

				final @Nullable String url = developer.getUrl();
				if (url != null && (!(url.trim().isEmpty()))) {
					sb.append("\t\t<url>").append(url).append("</url>\n");
				}

				final @Nullable String organization = developer.getOrganization();
				if (organization != null &&
					(!(organization.trim().isEmpty()))) {
					sb.append("\t\t<organization>").append(
						organization
					).append("</organization>\n");
				}

				final @Nullable String organizationUrl = developer.getOrganizationUrl();
				if (organizationUrl != null &&
					(!(organizationUrl.trim().isEmpty()))) {
					sb.append("\t\t<organizationUrl>").append(
						organizationUrl
					).append("</organizationUrl>\n");
				}

				final @Nullable String timezone = developer.getTimezone();
				if (timezone != null && (!(timezone.trim().isEmpty()))) {
					sb.append("\t\t<timezone>").append(
						timezone
					).append("</timezone>\n");
				}

				sb.append("\t</developer>\n");
			}
			sb.append("</developers>");

			try {
				pomBytes = PomProcessor.addContent(
					pomBytes,
					sb.toString(),
					"/project/developers",
					overwriteEffective
				);
			} catch (
				final @NotNull
				IOException e
			) {
				log.error("Couldn't add URL to POM!", e);
			}

			appliedChanges = true;
		}

		if (appliedChanges) {
			try {
				log.info(
					"Changed POM with defaults. " +
					"Reload Maven project."
				);
				Files.write(outputPom.toPath(), pomBytes);
			} catch (
				final @NotNull
				IOException e
			) {
				throw new MojoExecutionException(
					"Can't write model to output POM!",
					e
				);
			}
		} else {
			log.info("Nothing changed.");
		}
	}
}
